GIT_URL=https://github.com/BongChan/awesome-media-frontend-jenkins.git
GIT_CREDENTIAL=coramdeo0620@gmail.com
GIT_WEB_VIEW_URL=https://github.com/BongChan/awesome-media-frontend-jenkins

# Maven Local Repository 로 사용 할 pvc
MAVEN_REPO_PVC=jenkins-pvc

DOCKER_IMAGE_NAME=awsome-media-frontend
DOCKER_REGISTRY=icp.ghama.io:8500
DOCKER_NAMESPACE=ns-admin1
DOCKER_CREDENTIAL=docker-registry

K8S_NAMESPACE=ns-admin1
DEPLOYMENT_NAME=awsome-media-frontend-deployment
CONTAINER_NAME=tf-test-dev

def label = "jenkins-${UUID.randomUUID().toString()}"
 
podTemplate(label:label,
    // 빌드를 실행 할 Agent Pod 환경 구성
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.5.2-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
        secretVolume(mountPath: '/var/run/secrets/kubernetes.io/serviceaccount', secretName: 'jenkins-token-dt72m'),
        persistentVolumeClaim(mountPath: '/root/.m2', claimName: MAVEN_REPO_PVC)
    ]) {
 
    node(label) {
        def myRepo
        // checkout step
        // Git 에서 소스를 체크아웃 받는다.
        stage('checkout') {
            myRepo = checkout([
                $class: 'GitSCM',
                branches: [[name: '*/master']],
                browser: [$class: 'GogsGit', repoUrl: GIT_WEB_VIEW_URL],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[
                    credentialsId: GIT_CREDENTIAL,
                    url: GIT_URL
                ]]
            ])
        }
     
        // Docker Image Tag 생성을 위해 Git Commit ID 추출
        def gitCommit = myRepo.GIT_COMMIT
        def shortGitCommit = "${gitCommit[0..10]}"
 
        // Maven build
        stage('build') {
            container('maven') {
                sh 'mvn clean package'
            }
        }
     
        def DOCKER_IMAGE_URL = '${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_IMAGE_NAME}:' + shortGitCommit
 
 
        // Docker Image Build & Push   
        stage('Build Docker image') {
            container('docker') {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]) {
                    sh 'docker login ${DOCKER_REGISTRY} -u ' + DOCKER_USER + ' -p ' + DOCKER_PASSWORD
                    sh 'docker build -t ' + DOCKER_IMAGE_URL + ' .'
                    sh 'docker push ' + DOCKER_IMAGE_URL
                }
            }
        }
 
        // Kubernetes 배포   
        stage('kubectl') {
            container('kubectl') {
                sh 'kubectl apply -n ${K8S_NAMESPACE} -f ./k8s'
                sh 'kubectl set image deployments/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=' + DOCKER_IMAGE_URL + ' -n ${K8S_NAMESPACE}'
                sh 'kubectl rollout status deployments/${DEPLOYMENT_NAME} -n ${K8S_NAMESPACE}'
            }
        }
    }
}


kubectl config set-cluster icp.ghama.io --server=https://169.56.83.51:8001 --insecure-skip-tls-verify=true
kubectl config set-context icp.ghama.io-context --cluster=icp.ghama.io
kubectl config set-credentials admin --token=eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF0X2hhc2giOiJITUpyeGR2Y3N1ODFUZGg0YnoxSE1nIiwiaXNzIjoiaHR0cHM6Ly9pY3AuZ2hhbWEuaW86OTQ0My9vaWRjL2VuZHBvaW50L09QIiwiYXVkIjoiNDc4YTU4OGVjNjlmOWViNTllYzBiZDg0Njg2NTA4MTAiLCJleHAiOjE1MjI0MTg2MjcsImlhdCI6MTUyMjM3NTQyN30.elQepx1FL--idffTlKiJkQuluMnwMMtRwOh5MbGvJalB5FK8Pm7HiV12VEkm4rruJMxG9yrYUIF-ziRhtdTCp06shr6hMHQaLDAmyK3QB4yUq2CnyvWyVfaO0Os5H3TmmL_NxeO-8S5mYG7irUqggdPmIa1JIp6hbGVTOSSrxB4b-dtYUZ7mYBKgirgOsAn4oOU5xvf4qDb5V9cZRhoqcRU72x8thNJY4y1RMTN56__IA61L7bNyxpNntVUKs99EbTUnu8dZQ2QiQzQJlQgO_RPsD0vdDN0449hS28_5-Y30spUcYeaN9ieCRX_i2o7q4Vh7aOXXVnuSEZoate-oHg
kubectl config set-context icp.ghama.io-context --user=admin --namespace=jenkins
kubectl config use-context icp.ghama.io-context
